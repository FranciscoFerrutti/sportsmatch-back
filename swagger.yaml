openapi: 3.0.0
info:
  title: SportsMatch API
  description: API para la gestión de clubs, canchas, usuarios, eventos y reservas en SportsMatch.
  version: 1.0.0
servers:
  - url: http://localhost:3000
    description: Servidor local de desarrollo
paths:
  /auth:
    post:
      tags:
        - Auth
      summary: Registrar un nuevo usuario
      description: Crea un nuevo usuario con los detalles proporcionados.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCreate'
      responses:
        '201':
          description: Usuario creado con éxito.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Error en la validación de los datos de entrada.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: El correo electrónico ya está en uso.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    get:
      tags:
        - Auth
      summary: Iniciar sesión
      description: Autentica un usuario y devuelve un token de acceso.
      security:
        - BasicAuth: [ ]
      responses:
        '200':
          description: Inicio de sesión exitoso.
          headers:
            c-api-key:
              schema:
                type: string
                description: Token de acceso generado para el usuario.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '401':
          description: Credenciales incorrectas.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Acceso denegado.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /clubauth:
    post:
      tags:
        - ClubAuth
      summary: Registrar un nuevo club
      description: Crea un nuevo club con los detalles proporcionados.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ClubCreate'
      responses:
        '201':
          description: Club creado con éxito.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Club'
        '400':
          description: Error en la validación de los datos de entrada.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: El correo electrónico ya está en uso.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    get:
      tags:
        - ClubAuth
      summary: Iniciar sesión como club
      description: Autentica un club y devuelve un token de acceso.
      security:
        - BasicAuth: [ ]
      responses:
        '200':
          description: Inicio de sesión exitoso.
          headers:
            c-api-key:
              schema:
                type: string
                description: Token de acceso generado para el club.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClubAuthResponse'
        '401':
          description: Credenciales incorrectas.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Acceso denegado.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /clubs:
    get:
      tags:
        - Clubs
      summary: Obtener clubs con filtros opcionales
      description: Obtiene una lista de todos los clubs disponibles. Se pueden aplicar filtros opcionales.
      parameters:
        - name: clubId
          in: query
          schema:
            type: integer
          description: Filtra por un ID de club específico.
        - name: location
          in: query
          schema:
            type: string
          description: Filtra por ubicación del club.
        - name: radius
          in: query
          schema:
            type: number
            description: Radio de búsqueda en kilómetros (aplica solo si se usa `location`).
      responses:
        '200':
          description: Lista de clubs obtenida con éxito.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Club'
        '400':
          description: Error en la solicitud.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /clubs/{clubId}:
    put:
      tags:
        - Clubs
      summary: Actualizar información de un club
      description: Permite modificar datos de un club. Requiere autenticación.
      security:
        - BearerAuth: [ ]
      parameters:
        - name: clubId
          in: path
          required: true
          schema:
            type: integer
          description: ID del club a actualizar.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ClubUpdate'
      responses:
        '200':
          description: Club actualizado con éxito.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Club'
        '403':
          description: No autorizado para actualizar este club.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Club no encontrado.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /clubs/{clubId}/location:
    put:
      tags:
        - Clubs
      summary: Actualizar ubicación de un club
      description: Permite modificar la ubicación de un club. Requiere autenticación.
      security:
        - BearerAuth: [ ]
      parameters:
        - name: clubId
          in: path
          required: true
          schema:
            type: integer
          description: ID del club a actualizar.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ClubLocation'
      responses:
        '200':
          description: Ubicación del club actualizada con éxito.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Club'
        '403':
          description: No autorizado para actualizar la ubicación de este club.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Club no encontrado.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /events:
    get:
      tags:
        - Events
      summary: Obtener eventos con filtros opcionales
      description: Retorna una lista de eventos con filtros como deporte, usuario, ubicación y más.
      parameters:
        - name: participantId
          in: query
          schema:
            type: integer
          description: Filtrar eventos en los que participa un usuario.
        - name: sportId
          in: query
          schema:
            type: integer
          description: Filtrar eventos por deporte.
        - name: userId
          in: query
          schema:
            type: integer
          description: Filtrar eventos creados por un usuario específico.
        - name: location
          in: query
          schema:
            type: string
          description: Filtrar eventos por ubicación.
        - name: expertise
          in: query
          schema:
            type: string
          description: Filtrar eventos por nivel de experiencia.
        - name: schedule
          in: query
          schema:
            type: string
          description: Filtrar eventos por horario.
        - name: date
          in: query
          schema:
            type: string
          description: Filtrar eventos por fecha.
        - name: page
          in: query
          schema:
            type: integer
            default: 0
          description: Número de página para paginación.
        - name: limit
          in: query
          schema:
            type: integer
            default: 20
          description: Número de elementos por página.
      responses:
        '200':
          description: Lista de eventos obtenida con éxito.
          content:
            application/json:
              schema:
                type: object
                properties:
                  page:
                    type: integer
                  pageSize:
                    type: integer
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/Event'
        '400':
          description: Error en la solicitud.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    post:
      tags:
        - Events
      summary: Crear un nuevo evento
      description: Crea un nuevo evento deportivo. Requiere autenticación.
      security:
        - BearerAuth: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EventCreate'
      responses:
        '201':
          description: Evento creado con éxito.
          content:
            application/json:
              schema:
                type: object
                properties:
                  eventId:
                    type: integer
        '400':
          description: Datos inválidos.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Acceso denegado.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /events/{eventId}:
    get:
      tags:
        - Events
      summary: Obtener detalles de un evento
      description: Retorna los detalles de un evento específico por su ID.
      parameters:
        - name: eventId
          in: path
          required: true
          schema:
            type: integer
          description: ID del evento
      responses:
        '200':
          description: Detalles del evento obtenidos con éxito.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'
        '404':
          description: Evento no encontrado.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /fields:
    get:
      tags:
        - Fields
      summary: Obtener todas las canchas con filtro opcional
      description: Devuelve una lista de todas las canchas registradas. Se puede filtrar por `clubId`.
      parameters:
        - name: clubId
          in: query
          schema:
            type: integer
          description: Filtrar canchas por club.
      responses:
        '200':
          description: Lista de canchas obtenida con éxito.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Field'
        '400':
          description: Error en la solicitud.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    post:
      tags:
        - Fields
      summary: Registrar una nueva cancha
      description: Crea una nueva cancha asociada al club del administrador autenticado.
      security:
        - BearerAuth: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FieldCreate'
      responses:
        '201':
          description: Cancha creada con éxito.
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
        '400':
          description: Datos inválidos.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Acceso denegado.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /fields/{fieldId}:
    get:
      tags:
        - Fields
      summary: Obtener detalles de una cancha
      description: Retorna la información de una cancha específica por su ID.
      parameters:
        - name: fieldId
          in: path
          required: true
          schema:
            type: integer
          description: ID de la cancha.
      responses:
        '200':
          description: Información de la cancha obtenida con éxito.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Field'
        '404':
          description: Cancha no encontrada.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    put:
      tags:
        - Fields
      summary: Actualizar una cancha
      description: Actualiza los detalles de una cancha específica. Requiere autenticación del administrador del club.
      security:
        - BearerAuth: [ ]
      parameters:
        - name: fieldId
          in: path
          required: true
          schema:
            type: integer
          description: ID de la cancha a actualizar.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FieldUpdate'
      responses:
        '200':
          description: Cancha actualizada con éxito.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Field'
        '400':
          description: Datos inválidos.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Acceso denegado.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Cancha no encontrada.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    delete:
      tags:
        - Fields
      summary: Eliminar una cancha
      description: Elimina una cancha específica. Requiere autenticación del administrador del club.
      security:
        - BearerAuth: [ ]
      parameters:
        - name: fieldId
          in: path
          required: true
          schema:
            type: integer
          description: ID de la cancha a eliminar.
      responses:
        '204':
          description: Cancha eliminada con éxito.
        '403':
          description: Acceso denegado.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Cancha no encontrada.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /health:
    get:
      tags:
        - Health
      summary: Verificar estado del servicio
      description: Comprueba si el servicio está funcionando correctamente.
      responses:
        '200':
          description: El servicio está activo.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthResponse'
        '503':
          description: El servicio no está disponible.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    post:
      tags:
        - Health
      summary: Verificar estado del servicio
      description: Comprueba si el servicio está funcionando correctamente (alternativa con método POST).
      responses:
        '200':
          description: El servicio está activo.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthResponse'
        '503':
          description: El servicio no está disponible.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /events/{eventId}/participants:
    get:
      tags:
        - Participants
      summary: Obtener participantes de un evento
      description: Lista a todos los participantes de un evento específico, con opción de filtrar por estado.
      parameters:
        - name: eventId
          in: path
          required: true
          schema:
            type: integer
          description: ID del evento
        - name: status
          in: query
          schema:
            type: string
            enum: [ accepted, pending ]
          description: Filtrar participantes por estado.
      responses:
        '200':
          description: Lista de participantes obtenida con éxito.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Participant'
        '400':
          description: Error en la solicitud.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Evento no encontrado.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    post:
      tags:
        - Participants
      summary: Agregar participante a un evento
      description: Agrega un usuario como participante en un evento. Solo los usuarios autenticados pueden agregarse.
      security:
        - BearerAuth: [ ]
      parameters:
        - name: eventId
          in: path
          required: true
          schema:
            type: integer
          description: ID del evento
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ParticipantCreate'
      responses:
        '201':
          description: Participante agregado exitosamente.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Participant'
        '400':
          description: ID de usuario no válido o usuario no autorizado.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Evento no encontrado.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    delete:
      tags:
        - Participants
      summary: Eliminar un participante de un evento
      description: Permite a un usuario o administrador eliminar a un participante de un evento.
      security:
        - BearerAuth: [ ]
      parameters:
        - name: eventId
          in: path
          required: true
          schema:
            type: integer
          description: ID del evento
        - name: participantId
          in: path
          required: true
          schema:
            type: integer
          description: ID del participante a eliminar
      responses:
        '200':
          description: Participante eliminado exitosamente.
        '400':
          description: Error en la solicitud.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Participante o evento no encontrado.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    put:
      tags:
        - Participants
      summary: Actualizar estado de un participante
      description: Permite al dueño del evento actualizar el estado de participación de un usuario.
      security:
        - BearerAuth: [ ]
      parameters:
        - name: eventId
          in: path
          required: true
          schema:
            type: integer
          description: ID del evento
        - name: participantId
          in: path
          required: true
          schema:
            type: integer
          description: ID del participante a actualizar
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ParticipantUpdate'
      responses:
        '200':
          description: Estado del participante actualizado con éxito.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Participant'
        '400':
          description: Estado no válido o usuario no autorizado para realizar la acción.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Evento o participante no encontrado.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /payments/{reservationId}/process_payment:
    post:
      tags:
        - Payments
      summary: Procesar un pago
      description: Procesa un pago para una reserva. Solo el dueño del evento puede pagar.
      security:
        - BearerAuth: [ ]
      parameters:
        - name: reservationId
          in: path
          required: true
          schema:
            type: integer
          description: ID de la reserva a pagar.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PaymentRequest'
      responses:
        '200':
          description: Pago procesado con éxito.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Payment'
        '400':
          description: Error en la solicitud.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: No autorizado para realizar el pago.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: La reserva ya tiene un pago aprobado.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /payments/{reservationId}:
    get:
      tags:
        - Payments
      summary: Obtener pagos de una reserva
      description: Retorna la lista de pagos asociados a una reserva.
      security:
        - BearerAuth: [ ]
      parameters:
        - name: reservationId
          in: path
          required: true
          schema:
            type: integer
          description: ID de la reserva.
      responses:
        '200':
          description: Lista de pagos obtenida con éxito.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Payment'
        '403':
          description: No autorizado para ver estos pagos.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Reserva no encontrada.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /payments/club/{reservationId}/status:
    get:
      tags:
        - Payments
      summary: Obtener estado de pago para un club
      description: Devuelve el estado del pago y los detalles del propietario del evento.
      security:
        - BearerAuth: [ ]
      parameters:
        - name: reservationId
          in: path
          required: true
          schema:
            type: integer
          description: ID de la reserva.
      responses:
        '200':
          description: Estado del pago obtenido con éxito.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentStatus'
        '403':
          description: Acceso no autorizado.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Reserva no encontrada.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /payments/{paymentId}/refund:
    post:
      tags:
        - Payments
      summary: Reembolsar un pago
      description: Procesa el reembolso de un pago específico.
      security:
        - BearerAuth: [ ]
      parameters:
        - name: paymentId
          in: path
          required: true
          schema:
            type: integer
          description: ID del pago a reembolsar.
      responses:
        '200':
          description: Reembolso procesado con éxito.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Refund'
        '404':
          description: Pago no encontrado.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Error procesando el reembolso.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /reservations/event/{eventId}/available:
    get:
      tags:
        - Reservations
      summary: Buscar franjas horarias disponibles para un evento
      description: Devuelve las franjas horarias disponibles en campos cercanos al evento especificado.
      security:
        - BearerAuth: [ ]
      parameters:
        - name: eventId
          in: path
          required: true
          schema:
            type: integer
          description: ID del evento.
        - name: radius
          in: query
          schema:
            type: number
          description: Radio de búsqueda en kilómetros.
        - name: maxResults
          in: query
          schema:
            type: integer
          description: Número máximo de resultados a devolver.
      responses:
        '200':
          description: Lista de franjas horarias disponibles.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/FieldAvailability'
        '404':
          description: Evento no encontrado.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /reservations/event/{eventId}:
    post:
      tags:
        - Reservations
      summary: Crear una reserva para un evento
      description: Crea una reserva para un evento especificado.
      security:
        - BearerAuth: [ ]
      parameters:
        - name: eventId
          in: path
          required: true
          schema:
            type: integer
          description: ID del evento.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReservationCreate'
      responses:
        '201':
          description: Reserva creada exitosamente.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Reservation'
        '400':
          description: Datos inválidos.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Evento o campo no encontrado.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    get:
      tags:
        - Reservations
      summary: Obtener reservas de un evento
      description: Devuelve todas las reservas asociadas a un evento.
      security:
        - BearerAuth: [ ]
      parameters:
        - name: eventId
          in: path
          required: true
          schema:
            type: integer
          description: ID del evento.
      responses:
        '200':
          description: Lista de reservas del evento.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Reservation'
        '404':
          description: Evento no encontrado.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /reservations/{reservationId}/status:
    patch:
      tags:
        - Reservations
      summary: Actualizar el estado de una reserva
      description: Permite a un club actualizar el estado de una reserva.
      security:
        - BearerAuth: [ ]
      parameters:
        - name: reservationId
          in: path
          required: true
          schema:
            type: integer
          description: ID de la reserva.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReservationStatusUpdate'
      responses:
        '200':
          description: Estado actualizado exitosamente.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Reservation'
        '400':
          description: Estado inválido.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Reserva no encontrada.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /reservations:
    get:
      tags:
        - Reservations
      summary: Obtener reservas por club
      description: Devuelve todas las reservas asociadas a un club.
      security:
        - BearerAuth: [ ]
      parameters:
        - name: status
          in: query
          schema:
            type: string
            enum: [ PENDING, CONFIRMED, CANCELLED ]
          description: Filtrar reservas por estado.
      responses:
        '200':
          description: Lista de reservas del club.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Reservation'
        '403':
          description: Acceso denegado.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /reservations/{reservationId}:
    delete:
      tags:
        - Reservations
      summary: Cancelar una reserva
      description: Cancela una reserva específica.
      security:
        - BearerAuth: [ ]
      parameters:
        - name: reservationId
          in: path
          required: true
          schema:
            type: integer
          description: ID de la reserva.
      responses:
        '204':
          description: Reserva cancelada exitosamente.
        '404':
          description: Reserva no encontrada.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    get:
      tags:
        - Reservations
      summary: Obtener detalles de una reserva
      description: Devuelve los detalles de una reserva, incluyendo información del propietario.
      security:
        - BearerAuth: [ ]
      parameters:
        - name: reservationId
          in: path
          required: true
          schema:
            type: integer
          description: ID de la reserva.
      responses:
        '200':
          description: Detalles de la reserva obtenidos con éxito.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReservationWithOwner'
        '404':
          description: Reserva no encontrada.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /sports:
    get:
      tags:
        - Sports
      summary: Obtener todos los deportes
      description: Devuelve una lista de todos los deportes disponibles en la plataforma.
      responses:
        '200':
          description: Lista de deportes obtenida con éxito.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Sport'
        '404':
          description: No se encontraron deportes disponibles.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /fields/{fieldId}/availability:
    post:
      tags:
        - TimeSlots
      summary: Crear franjas horarias para un campo
      description: Agrega nuevas franjas horarias para un campo específico.
      security:
        - BearerAuth: [ ]
      parameters:
        - name: fieldId
          in: path
          required: true
          schema:
            type: integer
          description: ID del campo.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TimeSlotCreate'
      responses:
        '201':
          description: Franjas horarias creadas exitosamente.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TimeSlotList'
        '400':
          description: Datos inválidos.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Campo no encontrado.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    get:
      tags:
        - TimeSlots
      summary: Obtener franjas horarias de un campo
      description: Recupera todas las franjas horarias para un campo, con filtros opcionales.
      parameters:
        - name: fieldId
          in: path
          required: true
          schema:
            type: integer
          description: ID del campo.
        - name: availabilityDate
          in: query
          schema:
            type: string
            format: date
          description: Fecha para filtrar las franjas horarias.
        - name: slotStatus
          in: query
          schema:
            $ref: '#/components/schemas/TimeSlotStatus'
        - name: startTime
          in: query
          schema:
            type: string
            format: time
          description: Hora de inicio para filtrar.
        - name: endTime
          in: query
          schema:
            type: string
            format: time
          description: Hora de fin para filtrar.
      responses:
        '200':
          description: Lista de franjas horarias obtenida con éxito.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TimeSlotList'
        '404':
          description: Campo no encontrado.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /fields/{fieldId}/availability/available:
    get:
      tags:
        - TimeSlots
      summary: Obtener franjas horarias disponibles
      description: Devuelve todas las franjas horarias disponibles para un rango de fechas.
      parameters:
        - name: fieldId
          in: path
          required: true
          schema:
            type: integer
          description: ID del campo.
        - name: startDate
          in: query
          required: true
          schema:
            type: string
            format: date
          description: Fecha de inicio del rango.
        - name: endDate
          in: query
          required: true
          schema:
            type: string
            format: date
          description: Fecha de fin del rango.
      responses:
        '200':
          description: Lista de franjas horarias disponibles.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TimeSlotAvailableList'
        '404':
          description: Campo no encontrado.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /fields/{fieldId}/availability/{slotId}:
    delete:
      tags:
        - TimeSlots
      summary: Eliminar una franja horaria
      description: Elimina una franja horaria específica de un campo.
      security:
        - BearerAuth: [ ]
      parameters:
        - name: fieldId
          in: path
          required: true
          schema:
            type: integer
          description: ID del campo.
        - name: slotId
          in: path
          required: true
          schema:
            type: integer
          description: ID de la franja horaria.
      responses:
        '204':
          description: Slot eliminado exitosamente.
        '404':
          description: Slot o campo no encontrado.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Acceso denegado.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /fields/{fieldId}/availability/{slotId}/status:
    patch:
      tags:
        - TimeSlots
      summary: Actualizar el estado de una franja horaria
      description: Permite actualizar el estado de una franja horaria específica.
      security:
        - BearerAuth: [ ]
      parameters:
        - name: fieldId
          in: path
          required: true
          schema:
            type: integer
          description: ID del campo.
        - name: slotId
          in: path
          required: true
          schema:
            type: integer
          description: ID de la franja horaria.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TimeSlotStatusUpdate'
      responses:
        '200':
          description: Estado actualizado exitosamente.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TimeSlot'
        '400':
          description: Estado inválido.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Slot o campo no encontrado.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /users:
    get:
      tags:
        - Users
      summary: Obtener todos los usuarios
      description: Recupera una lista de todos los usuarios registrados.
      responses:
        '200':
          description: Lista de usuarios obtenida con éxito.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserList'
        '403':
          description: Acceso denegado.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /users/{userId}:
    get:
      tags:
        - Users
      summary: Obtener detalles de un usuario
      description: Recupera los detalles de un usuario específico por su ID.
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
          description: ID del usuario.
      responses:
        '200':
          description: Detalles del usuario obtenidos con éxito.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: Usuario no encontrado.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    put:
      tags:
        - Users
      summary: Actualizar información de un usuario
      description: Permite actualizar detalles del usuario como teléfono, ubicaciones y deportes.
      security:
        - BearerAuth: [ ]
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
          description: ID del usuario.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserUpdate'
      responses:
        '200':
          description: Información del usuario actualizada con éxito.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Datos inválidos.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Usuario no encontrado.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /users/{userId}/rating:
    post:
      tags:
        - Users
      summary: Calificar a un usuario
      description: Permite calificar a un usuario después de un evento.
      security:
        - BearerAuth: [ ]
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
          description: ID del usuario a calificar.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRating'
      responses:
        '201':
          description: Usuario calificado con éxito.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Calificación inválida o evento no relacionado.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Usuario no encontrado.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /users/{userId}/image:
    get:
      tags:
        - Users
      summary: Obtener URL de la imagen del usuario
      description: Recupera una URL pre-firmada para descargar la imagen de perfil del usuario.
      security:
        - BearerAuth: [ ]
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
          description: ID del usuario.
      responses:
        '200':
          description: URL pre-firmada obtenida con éxito.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserImage'
        '404':
          description: Usuario o imagen no encontrada.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    put:
      tags:
        - Users
      summary: Actualizar la imagen del usuario
      description: Recupera una URL pre-firmada para subir una nueva imagen de perfil para el usuario.
      security:
        - BearerAuth: [ ]
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
          description: ID del usuario.
      responses:
        '200':
          description: URL pre-firmada obtenida con éxito.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserImageUpload'
        '404':
          description: Usuario no encontrado.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

components:
  securitySchemes:
    BasicAuth:
      type: http
      scheme: basic
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    UserCreate:
      type: object
      properties:
        email:
          type: string
          format: email
        password:
          type: string
          format: password
        firstName:
          type: string
        lastName:
          type: string
        phoneNumber:
          type: string
    Club:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        email:
          type: string
          format: email
        phoneNumber:
          type: string
    ClubCreate:
      type: object
      properties:
        email:
          type: string
          format: email
        password:
          type: string
          format: password
        name:
          type: string
        phoneNumber:
          type: string
    ClubUpdate:
      type: object
      properties:
        phoneNumber:
          type: string
          description: Nuevo número de teléfono del club
        name:
          type: string
          description: Nuevo nombre del club
    ClubLocation:
      type: object
      properties:
        latitude:
          type: number
          format: float
          description: Latitud de la ubicación del club
        longitude:
          type: number
          format: float
          description: Longitud de la ubicación del club
        address:
          type: string
          description: Dirección del club
    AuthResponse:
      type: object
      properties:
        user:
          $ref: '#/components/schemas/User'
        token:
          type: string
    ClubAuthResponse:
      type: object
      properties:
        club:
          $ref: '#/components/schemas/Club'
        token:
          type: string
    Event:
      type: object
      properties:
        id:
          type: integer
        sportId:
          type: integer
        expertise:
          type: string
        schedule:
          type: string
          format: date-time
        location:
          type: string
        remaining:
          type: integer
        duration:
          type: integer
        description:
          type: string
          maxLength: 100
    EventCreate:
      type: object
      required:
        - sportId
        - expertise
        - schedule
        - location
        - remaining
        - duration
        - description
      properties:
        sportId:
          type: integer
        expertise:
          type: string
        schedule:
          type: string
          format: date-time
        location:
          type: string
        remaining:
          type: integer
        duration:
          type: integer
        description:
          type: string
          maxLength: 100

    Field:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        description:
          type: string
        cost:
          type: number
        capacity:
          type: integer
        slot_duration:
          type: integer
        sports:
          type: array
          items:
            type: object
            properties:
              id:
                type: integer
              name:
                type: string
        club_id:
          type: integer

    FieldCreate:
      type: object
      required:
        - name
        - cost
        - description
        - capacity
        - slot_duration
        - sportIds
      properties:
        name:
          type: string
        cost:
          type: number
        description:
          type: string
        capacity:
          type: integer
        slot_duration:
          type: integer
        sportIds:
          type: array
          items:
            type: integer

    FieldUpdate:
        type: object
        properties:
          name:
            type: string
          cost:
            type: number
          description:
            type: string
          capacity:
            type: integer
          slot_duration:
            type: integer
          sports:
            type: array
            items:
              type: integer

    HealthResponse:
      type: object
      properties:
        status:
          type: string
          enum: [ OK, ERROR ]
          description: Estado del servicio
        message:
          type: string
          description: Mensaje descriptivo del estado
        timestamp:
          type: string
          format: date-time
          description: Marca de tiempo de la verificación

    Participant:
      type: object
      properties:
        id:
          type: integer
          description: ID del participante
        userId:
          type: integer
          description: ID del usuario participante
        eventId:
          type: integer
          description: ID del evento
        status:
          type: string
          enum: [ accepted, pending ]
          description: Estado de la participación
        joinedAt:
          type: string
          format: date-time
          description: Fecha y hora cuando se unió al evento

    ParticipantCreate:
      type: object
      required:
        - userId
      properties:
        userId:
          type: integer
          description: ID del usuario a agregar como participante

    ParticipantUpdate:
      type: object
      required:
        - status
      properties:
        status:
          type: string
          enum: [ accepted, rejected ]
          description: Nuevo estado de la participación

    ParticipantResponse:
      allOf:
        - $ref: '#/components/schemas/Participant'
        - type: object
          properties:
            user:
              $ref: '#/components/schemas/User'

    ParticipantListResponse:
      type: object
      properties:
        total:
          type: integer
          description: Total de participantes
        participants:
          type: array
          items:
            $ref: '#/components/schemas/ParticipantResponse'

    Payment:
      type: object
      properties:
        id:
          type: integer
        reservationId:
          type: integer
        transactionAmount:
          type: number
        transactionStatus:
          type: string
          enum: [ APPROVED, REJECTED, PENDING ]
        transactionDate:
          type: string
          format: date-time

    PaymentRequest:
      type: object
      required:
        - transaction_amount
      properties:
        transaction_amount:
          type: number
          description: Monto de la transacción.

    PaymentStatus:
      type: object
      properties:
        reservationId:
          type: integer
        isPaid:
          type: boolean
        paymentDate:
          type: string
          format: date-time
        amount:
          type: number
        owner:
          type: object
          properties:
            name:
              type: string
            phoneNumber:
              type: string

    Refund:
      type: object
      properties:
        refundId:
          type: integer
        paymentId:
          type: integer
        dateCreated:
          type: string
          format: date-time
        amountRefunded:
          type: number

    Reservation:
      type: object
      properties:
        id:
          type: integer
          description: ID de la reserva.
        eventId:
          type: integer
          description: ID del evento asociado.
        fieldId:
          type: integer
          description: ID de la cancha reservada.
        status:
          type: string
          enum: [ PENDING, CONFIRMED, CANCELLED, COMPLETED ]
          description: Estado de la reserva.
        cost:
          type: number
          description: Costo total de la reserva.
        timeSlots:
          type: array
          items:
            $ref: '#/components/schemas/TimeSlot'

    ReservationCreate:
      type: object
      required:
        - fieldId
        - slotIds
      properties:
        fieldId:
          type: integer
          description: ID de la cancha a reservar.
        slotIds:
          type: array
          items:
            type: integer
          description: IDs de las franjas horarias a reservar.

    ReservationStatusUpdate:
      type: object
      required:
        - status
      properties:
        status:
          type: string
          enum: [ CONFIRMED, CANCELLED ]
          description: Nuevo estado de la reserva.

    ReservationWithOwner:
      type: object
      properties:
        id:
          type: integer
        eventId:
          type: integer
        fieldId:
          type: integer
        status:
          type: string
          enum: [ PENDING, CONFIRMED, CANCELLED, COMPLETED ]
        cost:
          type: number
        timeSlots:
          type: array
          items:
            $ref: '#/components/schemas/TimeSlot'
        field:
          type: object
          properties:
            name:
              type: string
              description: Nombre de la cancha.
            clubId:
              type: integer
              description: ID del club propietario de la cancha.
            clubName:
              type: string
              description: Nombre del club propietario de la cancha.
        owner:
          type: object
          properties:
            id:
              type: integer
              description: ID del propietario del evento.
            name:
              type: string
              description: Nombre del propietario del evento.
            phone:
              type: string
              description: Teléfono de contacto del propietario.

    FieldAvailability:
      type: object
      properties:
        fieldId:
          type: integer
          description: ID de la cancha.
        fieldName:
          type: string
          description: Nombre de la cancha.
        clubId:
          type: integer
          description: ID del club.
        clubName:
          type: string
          description: Nombre del club.
        distance:
          type: number
          description: Distancia al evento en kilómetros.
        availableSlots:
          type: array
          items:
            $ref: '#/components/schemas/TimeSlot'
          description: Lista de franjas horarias disponibles.

    Sport:
      type: object
      properties:
        id:
          type: integer
          description: ID del deporte.
        name:
          type: string
          description: Nombre del deporte.

    TimeSlot:
      type: object
      properties:
        id:
          type: integer
        fieldId:
          type: integer
        availabilityDate:
          type: string
          format: date
        startTime:
          type: string
          format: time
        endTime:
          type: string
          format: time
        slotStatus:
          $ref: '#/components/schemas/TimeSlotStatus'

    TimeSlotStatus:
      type: string
      enum: [ available, booked, maintenance ]
      description: Estado posible de una franja horaria.

    TimeSlotCreate:
      type: object
      required:
        - availabilityDate
        - startTime
        - endTime
      properties:
        availabilityDate:
          type: string
          format: date
          description: Fecha de disponibilidad.
          example: "2025-01-01"
        startTime:
          type: string
          format: time
          description: Hora de inicio.
          example: "10:00"
        endTime:
          type: string
          format: time
          description: Hora de fin.
          example: "12:00"
        slotStatus:
          $ref: '#/components/schemas/TimeSlotStatus'

    TimeSlotStatusUpdate:
      type: object
      required:
        - slotStatus
      properties:
        slotStatus:
          $ref: '#/components/schemas/TimeSlotStatus'

    TimeSlotList:
      type: array
      items:
        $ref: '#/components/schemas/TimeSlot'

    TimeSlotAvailableList:
      type: array
      items:
        $ref: '#/components/schemas/TimeSlot'
      description: Lista de franjas horarias disponibles.

    User:
      type: object
      properties:
        id:
          type: integer
          description: ID del usuario.
        email:
          type: string
          format: email
          description: Correo electrónico del usuario.
        firstName:
          type: string
          description: Nombre del usuario.
        lastName:
          type: string
          description: Apellido del usuario.
        phoneNumber:
          type: string
          description: Número de teléfono del usuario.
        locations:
          type: array
          items:
            type: string
          description: Ubicaciones preferidas del usuario.
        sports:
          type: array
          items:
            type: integer
          description: IDs de deportes preferidos.
        rating:
          type: number
          format: float
          description: Calificación promedio del usuario.
        imageUrl:
          type: string
          description: URL de la imagen de perfil del usuario.

    UserUpdate:
      type: object
      properties:
        phoneNumber:
          type: string
          description: Nuevo número de teléfono.
        locations:
          type: array
          items:
            type: string
          description: Nuevas ubicaciones del usuario.
        sports:
          type: array
          items:
            type: integer
          description: Nuevos deportes del usuario.

    UserRating:
      type: object
      required:
        - rating
        - eventId
      properties:
        rating:
          type: integer
          minimum: 1
          maximum: 5
          description: Calificación (1-5).
        eventId:
          type: integer
          description: ID del evento asociado.

    UserImage:
      type: object
      properties:
        presignedGetUrl:
          type: string
          description: URL pre-firmada para descargar la imagen.

    UserImageUpload:
      type: object
      properties:
        presignedPutUrl:
          type: string
          description: URL pre-firmada para subir la imagen.

    UserList:
      type: array
      items:
        $ref: '#/components/schemas/User'


    ErrorResponse:
      type: object
      properties:
        message:
          type: string
        status:
          type: integer
        details:
          type: array
          items:
            type: string
